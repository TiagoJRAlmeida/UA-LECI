#!/bin/bash

# Definir cores
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
MAGENTA="\033[1;35m"
CYAN="\033[1;36m"
RESET="\033[0m"

sudo apt-get install jq python3-flask
FILE_FOLDER=$(dirname $0)

echo $'\n'
echo -e "${MAGENTA}O objetivo deste script é mostrar o funcionamento do sistema. Para tal este segue uma ordem onde contar uma 'hisória' sobre um subject que cria uma conta, uma organização e gere-a de diferentes formas, adicionando subjects novos, roles, documentos e mais! ${RESET}"
echo $'\n'

# Header inicial
echo -e "${CYAN}================== Setup ==================${RESET}"

# Remover ficheiros de testes passados
echo $'\n'
echo -e "${YELLOW}Remover ficheiros e pastas de testes passados${RESET}"

if test -f "${FILE_FOLDER}/Subject_A_keys.json"; then
    rm "${FILE_FOLDER}/Subject_A_keys.json"
    echo "--> Ficheiro '${FILE_FOLDER}/Subject_A_keys.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/Subject_B_keys.json"; then
    rm "${FILE_FOLDER}/Subject_B_keys.json"
    echo "--> Ficheiro '${FILE_FOLDER}/Subject_B_keys.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/Subject_A_session.json"; then
    rm "${FILE_FOLDER}/Subject_A_session.json"
    echo "--> Ficheiro '${FILE_FOLDER}/Subject_A_session.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/Subject_B_session.json"; then
    rm "${FILE_FOLDER}/Subject_B_session.json"
    echo "--> Ficheiro '${FILE_FOLDER}/Subject_B_session.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/rep_pub_key.pem"; then
    rm "${FILE_FOLDER}/rep_pub_key.pem"
    echo "--> Ficheiro '${FILE_FOLDER}/rep_pub_key.pem' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/test_file_10Kb"; then
    rm "${FILE_FOLDER}/test_file_10Kb"
    echo "--> Ficheiro '${FILE_FOLDER}/test_file_10Kb' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/test_file_100Kb"; then
    rm "${FILE_FOLDER}/test_file_100Kb"
    echo "--> Ficheiro '${FILE_FOLDER}/test_file_100Kb' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/test_file_1Mb"; then
    rm "${FILE_FOLDER}/test_file_1Mb"
    echo "--> Ficheiro '${FILE_FOLDER}/test_file_1Mb' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/small_story.txt"; then
    rm "${FILE_FOLDER}/small_story.txt"
    echo "--> Ficheiro '${FILE_FOLDER}/small_story.txt' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/metadados.json"; then
    rm "${FILE_FOLDER}/metadados.json"
    echo "--> Ficheiro '${FILE_FOLDER}/metadados.json' removido."
    sleep 0.1
fi

if test -d "${FILE_FOLDER}/repository/docs"; then
    rm -rf "${FILE_FOLDER}/repository/docs"
    echo "--> Pasta '${FILE_FOLDER}/repository/docs' removida."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/repository/documents.json"; then
    rm "${FILE_FOLDER}/repository/documents.json"
    echo "--> Ficheiro '${FILE_FOLDER}/repository/documents.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/repository/organizations.json"; then
    rm "${FILE_FOLDER}/repository/organizations.json"
    echo "--> Ficheiro '${FILE_FOLDER}/repository/organizations.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/repository/sessions.json"; then
    rm "${FILE_FOLDER}/repository/sessions.json"
    echo "--> Ficheiro '${FILE_FOLDER}/repository/sessions.json' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/repository/rep_priv_key.pem"; then
    rm "${FILE_FOLDER}/repository/rep_priv_key.pem"
    echo "--> Ficheiro '${FILE_FOLDER}/repository/rep_priv_key.pem' removido."
    sleep 0.1
fi

if test -f "${FILE_FOLDER}/repository/rep_pub_key.pem"; then
    rm "${FILE_FOLDER}/repository/rep_pub_key.pem"
    echo "--> Ficheiro '${FILE_FOLDER}/repository/rep_pub_key.pem' removido."
    sleep 0.1
fi

echo $'\n'
echo -e "${YELLOW}Criar ficheiros de teste${RESET}"
sleep 0.1

# Criar ficheiro de teste de 10Kb
dd if=/dev/zero of="${FILE_FOLDER}/test_file_10Kb" bs=10K count=1 > /dev/null 2>&1
echo "--> Ficheiro de teste de 10Kb criado."
sleep 0.1

# Criar ficheiro de teste de 100Kb
dd if=/dev/zero of="${FILE_FOLDER}/test_file_100Kb" bs=100K count=1 > /dev/null 2>&1
echo "--> Ficheiro de teste de 100Kb criado."
sleep 0.1

# Criar ficheiro de teste de 1Mb
dd if=/dev/zero of="${FILE_FOLDER}/test_file_1Mb" bs=1M count=1 > /dev/null 2>&1
echo "--> Ficheiro de teste de 1Mb criado."
sleep 0.1

# Criar ficheiro de teste com pequena história
cat > "${FILE_FOLDER}/small_story.txt" <<'EOF'
In a quiet village, a boy named Liam discovered a hidden key buried 
in his garden. That night, he dreamt of a glowing door in the forest. 
The next day, curiosity led him to the woods, where the key fit perfectly into 
the mysterious door. As it creaked open, a dazzling world of floating islands and 
golden skies lay before him. Liam stepped through, knowing his life would never be the same.
EOF
echo "--> Ficheiro de teste com pequena história criado."
sleep 0.1

echo $'\n'
sleep 0.1

# Header final
echo -e "${CYAN}============== Fim do Setup ===============${RESET}"
sleep 0.2

echo $'\n'
echo -e "${GREEN}=========== Inicio da simulação ===========${RESET}"
echo $'\n'

# Inicializar o repositório
echo -e "${YELLOW}Iniciar o repositório${RESET}"
python3 "${FILE_FOLDER}/repository/repository.py" &
REPO_PID=$!
sleep 0.5

# Pausa para garantir que o repositório está ativo
echo -e "${RED}A carregar o servidor...${RESET}"
echo $'\n'
sleep 3

# Criação de credenciais iniciais
echo -e "${YELLOW}Subject A cria a suas credenciais${RESET}"
"${FILE_FOLDER}/commands/rep_subject_credentials" 1234 "${FILE_FOLDER}/Subject_A_keys.json"
echo $'\n'


# Criação de uma organização com as credenciais novas
echo -e "${YELLOW}Subject A cria uma nova organização${RESET}"
"${FILE_FOLDER}/commands/rep_create_org" Subject_A_ORG Subject_A Tiago Subject_A@ua.pt "${FILE_FOLDER}/Subject_A_keys.json"
echo $'\n'
sleep 0.1

# Mostrar que a organização foi criada
echo -e "${YELLOW}Subject A verifica se a sua organização foi criado com sucesso${RESET}"
"${FILE_FOLDER}/commands/rep_list_orgs"
echo $'\n'
sleep 0.1


# Criar uma sessão
echo -e "${YELLOW}Subject A inicia uma sessão dentro da organização que acabou de criar${RESET}"
"${FILE_FOLDER}/commands/rep_create_session" Subject_A_ORG Subject_A 1234 "${FILE_FOLDER}/Subject_A_keys.json" "${FILE_FOLDER}/Subject_A_session.json"
echo $'\n'
sleep 0.1


# Assumir uma role
echo -e "${YELLOW}Subject A assume a role MANAGER (role inicial default)${RESET}"
"${FILE_FOLDER}/commands/rep_assume_role" "${FILE_FOLDER}/Subject_A_session.json" MANAGER
echo $'\n'
sleep 0.1


# Adicionar novos subjects
echo -e "${YELLOW}Subject A adiciona um subject B á sua organização${RESET}"
"${FILE_FOLDER}/commands/rep_subject_credentials" 1234 "${FILE_FOLDER}/Subject_B_keys.json"
"${FILE_FOLDER}/commands/rep_add_subject" "${FILE_FOLDER}/Subject_A_session.json" Subject_B Subject_B Subject_B@ua.pt "${FILE_FOLDER}/Subject_B_keys.json"
echo $'\n'
sleep 0.1

# Mostrar que o subject B foi adicionado á organização
echo -e "${YELLOW}Subject A verifica se o Subject B foi adicionado com sucesso${RESET}"
"${FILE_FOLDER}/commands/rep_list_subjects" "${FILE_FOLDER}/Subject_A_session.json"
echo $'\n'
sleep 0.1

# Adicionar roles e permissões
echo -e "${YELLOW}Subject A experimenta criar uma role nova (ADMIN), adicionar permissões a essa role e atribuir-la ao Subject B${RESET}"
echo -e "${CYAN}Subject A adiciona a role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_add_role" "${FILE_FOLDER}/Subject_A_session.json" ADMIN
echo -e "${CYAN}Subject A adiciona a permissão SUBJECT_DOWN à role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_add_permission" "${FILE_FOLDER}/Subject_A_session.json" ADMIN SUBJECT_DOWN
echo -e "${CYAN}Subject A adiciona a permissão SUBJECT_UP à role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_add_permission" "${FILE_FOLDER}/Subject_A_session.json" ADMIN SUBJECT_UP
echo -e "${CYAN}Subject A adiciona dá a role ADMIN a si mesmo${RESET}"
"${FILE_FOLDER}/commands/rep_add_permission" "${FILE_FOLDER}/Subject_A_session.json" ADMIN Subject_A
echo -e "${CYAN}Subject A adiciona dá a role ADMIN ao Subject B${RESET}"
"${FILE_FOLDER}/commands/rep_add_permission" "${FILE_FOLDER}/Subject_A_session.json" ADMIN Subject_B
echo $'\n'
sleep 0.1

# Assumir a nova role
# echo "Assumindo a role de Admin..."
# "${FILE_FOLDER}/commands/rep_assume_role" "${FILE_FOLDER}/Subject_A_session.json" ADMIN

# Suspender e ativar subjects
echo -e "${YELLOW}Subject A experimenta suspender o Subject B${RESET}"
"${FILE_FOLDER}/commands/rep_suspend_subject" "${FILE_FOLDER}/Subject_A_session.json" Subject_B
"${FILE_FOLDER}/commands/rep_list_subjects" "${FILE_FOLDER}/Subject_A_session.json" Subject_B
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A volta a ativar o Subject B${RESET}"
"${FILE_FOLDER}/commands/rep_activate_subject" "${FILE_FOLDER}/Subject_A_session.json" Subject_B
"${FILE_FOLDER}/commands/rep_list_subjects" "${FILE_FOLDER}/Subject_A_session.json" Subject_B
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A experimenta com o gerenciamento de permissões e roles${RESET}"
echo -e "${CYAN}Subject A lista as permissões da role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_list_role_permissions" "${FILE_FOLDER}/Subject_A_session.json" ADMIN
echo -e "${CYAN}Subject A lista as roles com a permissão SUBJECT_UP${RESET}"
"${FILE_FOLDER}/commands/rep_list_permission_roles" "${FILE_FOLDER}/Subject_A_session.json" SUBJECT_UP
echo -e "${CYAN}Subject A suspende a role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_suspend_role" "${FILE_FOLDER}/Subject_A_session.json" ADMIN
echo -e "${CYAN}Subject A lista as suas roles e verifica que ADMIN foi suspenso${RESET}"
"${FILE_FOLDER}/commands/rep_list_subject_roles" "${FILE_FOLDER}/Subject_A_session.json" Subject_A
echo -e "${CYAN}Subject A reativa a role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_reactivate_role" "${FILE_FOLDER}/Subject_A_session.json" ADMIN
echo -e "${CYAN}Subject A lista as suas roles e verifica que ADMIN foi reativado${RESET}"
"${FILE_FOLDER}/commands/rep_list_subject_roles" "${FILE_FOLDER}/Subject_A_session.json" Subject_A
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A quer que o Subject B tenha a role ADMIN e consiga adicionar documentos.${RESET}"
echo -e "${YELLOW}Para isso primeiro adiciona a permissão DOC_NEW á role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_add_permission" "${FILE_FOLDER}/Subject_A_session.json" ADMIN DOC_NEW
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject B inicia sessão e assume a role ADMIN${RESET}"
"${FILE_FOLDER}/commands/rep_create_session" Subject_A_ORG Subject_B 1234 "${FILE_FOLDER}/Subject_B_keys.json" "${FILE_FOLDER}/Subject_B_session.json"
"${FILE_FOLDER}/commands/rep_assume_role" "${FILE_FOLDER}/Subject_B_session.json" ADMIN
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject B experimenta adicionar um documento de 10Kb${RESET}"
"${FILE_FOLDER}/commands/rep_add_doc" "${FILE_FOLDER}/Subject_B_session.json" "${FILE_FOLDER}/test_file_10Kb" test_file_10Kb
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject B experimenta adicionar um documento de 100Kb${RESET}"
"${FILE_FOLDER}/commands/rep_add_doc" "${FILE_FOLDER}/Subject_B_session.json" "${FILE_FOLDER}/test_file_100Kb" test_file_100Kb
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject B experimenta adicionar um documento de 1Mb${RESET}"
"${FILE_FOLDER}/commands/rep_add_doc" "${FILE_FOLDER}/Subject_B_session.json" "${FILE_FOLDER}/test_file_1Mb" test_file_1Mb
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A experimenta adicionar um documento com uma pequena história${RESET}"
"${FILE_FOLDER}/commands/rep_add_doc" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/small_story.txt" small_story
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A verifica que documentos foram adicionados pelo Subject B fazendo uso de diferentes filtros.${RESET}"
echo -e "${CYAN}Sem filtros (Todos os documentos)${RESET}"
"${FILE_FOLDER}/commands/rep_list_docs" "${FILE_FOLDER}/Subject_A_session.json"
echo -e "${CYAN}Documentos do Subject B${RESET}"
"${FILE_FOLDER}/commands/rep_list_docs" "${FILE_FOLDER}/Subject_A_session.json" -s Subject_B
echo -e "${CYAN}Documentos do Subject B mais recentes do que 18-12-20${RESET}"
"${FILE_FOLDER}/commands/rep_list_docs" "${FILE_FOLDER}/Subject_A_session.json" -s Subject_B -d nt 18-12-20
echo -e "${CYAN}Documentos do Subject B mais antigos do que 18-12-20${RESET}"
"${FILE_FOLDER}/commands/rep_list_docs" "${FILE_FOLDER}/Subject_A_session.json" -s Subject_B -d ot 18-12-20
echo -e "${CYAN}Documentos do Subject B do dia 18-12-20${RESET}"
"${FILE_FOLDER}/commands/rep_list_docs" "${FILE_FOLDER}/Subject_A_session.json" -s Subject_B -d et 18-12-20
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A experimenta modificar a ACL do documento de 1Mb${RESET}"
echo -e "${CYAN}Subject A adiciona a permissão DOC_READ á role ADMIN no ficheiro test_file_1Mb${RESET}"
"${FILE_FOLDER}/commands/rep_acl_doc" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/test_file_1Mb" + ADMIN DOC_READ
echo -e "${CYAN}Subject A adiciona a permissão DOC_ACL á role ADMIN no ficheiro test_file_1Mb${RESET}"
"${FILE_FOLDER}/commands/rep_acl_doc" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/test_file_1Mb" + ADMIN DOC_ACL
echo -e "${CYAN}Subject A remove a permissão DOC_ACL á role ADMIN no ficheiro test_file_1Mb${RESET}"
"${FILE_FOLDER}/commands/rep_acl_doc" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/test_file_1Mb" - ADMIN DOC_ACL
echo $'\n'
sleep 0.1

echo -e "${YELLOW}Subject A experimenta ler o conteudo do ficheiro small_story.txt${RESET}"
"${FILE_FOLDER}/commands/rep_get_doc_file" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/small_story"

echo -e "${YELLOW}Subject A experimenta apagar o file handle do ficheiro small_story.txt e tenta ler o conteudo novamente${RESET}"
echo -e "${CYAN}Subject A guarda primeiro o conteudo dos metadados${RESET}"
"${FILE_FOLDER}/commands/rep_get_doc_metadata" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/small_story" > "${FILE_FOLDER}/metadados.json"
file_handle=$(jq -r '.file_handle' "${FILE_FOLDER}/metadados.json")
echo -e "${CYAN}Subject A apaga o file handle do documento 'small_story'${RESET}"
"${FILE_FOLDER}/commands/rep_delete_doc" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/small_story"
echo -e "${CYAN}Subject A experimenta ler o conteudo do ficheiro small_story.txt novamente${RESET}"
"${FILE_FOLDER}/commands/rep_get_doc_file" "${FILE_FOLDER}/Subject_A_session.json" "${FILE_FOLDER}/small_story"
echo -e "${CYAN}Como esperado, não funciona. O Subject A então usa o file handle guardado anteriormente para ler o ficheiro${RESET}"
"${FILE_FOLDER}/commands/rep_get_file" "$file_handle"
echo -e "${CYAN}No entanto, o conteudo vem encriptado, então o Subject A guarda o conteudo num ficheiro e desencripta com o comando rep_decrypt_file${RESET}"
"${FILE_FOLDER}/commands/rep_get_file" "$file_handle" "${FILE_FOLDER}/encrypted_content"
"${FILE_FOLDER}/commands/rep_decrypt_file" "${FILE_FOLDER}/encrypted_content" "${FILE_FOLDER}/metadados.json"

echo -e "${GREEN}============= Fim da simulação ============${RESET}"
echo $'\n'
sleep 0.1

# Finalizar o repositório
echo -e "${RED}A Terminar o processo do repositório...${RESET}"
kill $REPO_PID  # Encerra o processo da API
wait $REPO_PID 2>/dev/null  # Aguarda o término para evitar processos zumbis
echo -e "${GREEN}Repositório terminado com sucesso.${RESET}"
sleep 0.1
echo $'\n'
